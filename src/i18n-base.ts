import { Signal } from '@angular/core'; 
import { EventTranslateLoad, I18nConfig, Language, TranslationData } from './translate.type'; 
import { catchError, isObservable, Observable, of, Subject } from 'rxjs'; export abstract class I18nTranslate { public readonly eventTranslateChanged = new Subject<EventTranslateLoad>(); protected readonly storeLanguage = new Map<Language, TranslationData>(); protected languageSupports: Language[] = []; abstract get(key: string, ...paramsValue: any[]): StringConstructor; abstract get$(key: string, ...paramsValue: any[]): Observable<string>; abstract getSignal(key: string, ...paramsValue: any[]): Signal<string>; abstract reloadLang(): void; abstract setLanguage(lang: Language): void; abstract getCurentLanguage(): Language abstract setLanguageSupported(langs: Language[]): void; abstract getLanguageSupported(): Language[] protected getTranslateStore(lang: Language) { return this.storeLanguage.get(lang) ?? {}; } protected setTranslateStore(lang: Language, data: TranslationData) { this.storeLanguage.set(lang, data); } }